cmake_minimum_required(VERSION 3.10.0)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_VERBOSE_MAKEFILE ON CACHE BOOL "ON")

enable_language(CXX)
project(aes-ni VERSION 0.1.0)

message("CMAKE_C_COMPILER = ${CMAKE_C_COMPILER}")
message("CMAKE_CXX_COMPILER = ${CMAKE_CXX_COMPILER}")

set(CMAKE_CXX_FLAGS "-march=native -Wall -Wextra -pedantic -pthread")
set(CMAKE_CXX_FLAGS_DEBUG "-g -fsanitize=address")
set(CMAKE_CXX_FLAGS_RELEASE "-Ofast -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-Ofast -g -fsanitize=address")
set(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -s -DNDEBUG")

find_package(OpenMP)
if(OpenMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()
find_package(GTest REQUIRED)
if(IS_DIRECTORY "${CMAKE_SOURCE_DIR}/fmt")
  add_subdirectory("${CMAKE_SOURCE_DIR}/fmt")
else()
  find_package(fmt REQUIRED)
endif()

include_directories("${CMAKE_SOURCE_DIR}/include")
add_library(aes-ni src/aes-ni.cpp src/rng.cpp)
target_link_libraries(aes-ni fmt::fmt-header-only)
add_executable(test_aes-ni test_aes-ni.cpp)
target_link_libraries(test_aes-ni aes-ni fmt::fmt-header-only GTest::GTest)
add_subdirectory("${CMAKE_SOURCE_DIR}/bench")
